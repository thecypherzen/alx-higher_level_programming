
Test cases for 0-add_integer.py:
A function that adds two numbers

>>> add_integer = __import__("0-add_integer").add_integer

======== CHECK 1 ========
Checking only one required positional param (a) is needed and
b defaults to 98
>>> add_integer(0)
98
>>> add_integer(3, 4)
7
>>> add_integer(3, -4)
-1
>>> add_integer(-2)
96

======== CHECK 2 ========
Check if can take in ints and floats.

>>> add_integer(2.1, 9)
11
>>> add_integer(59.342)
157

======= CHECK 3 ========
check if return type is always int.
>>> type(add_integer(73, 100))
<class 'int'>
>>> isinstance(add_integer(23.45, -9), int)
True

======= CHECK 4 ========
a and b must be integers or floats, else TypeError is raised.
>>> add_integer([2, 3])
Traceback (most recent call last):
TypeError: a must be an integer or b must be an integer

>>> add_integer([2, 3])
Traceback (innermost last):
TypeError: a must be an integer or b must be an integer

>>> add_integer("2", "5")
Traceback (most recent call last):
TypeError: a must be an integer or b must be an integer

>>> add_integer("2", "5")
Traceback (innermost last):
TypeError: a must be an integer or b must be an integer
