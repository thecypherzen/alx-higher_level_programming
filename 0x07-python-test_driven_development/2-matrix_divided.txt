Test Cases for 2-matrix_divided Module

>>> div_matrix = __import__("2-matrix_divided").matrix_divided

======== CHECK 1 =======
matrix is None
>>> div_matrix(None, 1)
Traceback (innermost last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

======== CHECK 2 =======
matrix is not a list
>>> div_matrix({"key1": 1, "key2": 2}, 3)
Traceback (innermost last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

======== CHECK 3 =======
matrix is empty
>>> div_matrix([], 3)
Traceback (innermost last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

======== CHECK 4 =======
matrix is list of list
>>> div_matrix([[2, 3], ("a", 3), "things", {1: 1, 2: 2}], 3)
Traceback (innermost last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

======== CHECK 5 =======
matrix has Nones as members
>>> div_matrix([[9, 9], [25.44, 19], None], 5)
Traceback (innermost last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

======== CHECK 6 =======
matrix row has None member(s)
>>> div_matrix([[-19], [None]], 4.55)
Traceback (innermost last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

======== CHECK 7 =======
matrix member empty
>>> div_matrix([[], [55], []], 4.55)
Traceback (innermost last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

======== CHECK 8 =======
matrix is list of list of numbers only
>>> div_matrix([[1, 2.0], ["str1", (1, 2)], [5, [3, 4]]], 10)
Traceback (innermost last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

======== CHECK 9 =======
matrix row sizes equal
>>> div_matrix([[10, 0, -4], [9], [-1, 4, 0, 5]], 9)
Traceback (innermost last):
TypeError: Each row of the matrix must have the same size

======== CHECK 10 =======
div must be a number
>>> div_matrix([[1, 2], [3, 4], [5, 10]], "2")
Traceback (innermost last):
TypeError: div must be a number

======== CHECK 11 =======
div is zero
>>> div_matrix([[-1, 2, 9], [8, 99, -20]], 0)
Traceback (innermost last):
ZeroDivisionError: division by zero

======== CHECK 12 =======
div is 1
>>> div_matrix([[1, -5], [3, 0]], 1)
[[1.0, -5.0], [3.0, 0.0]]

======== CHECK 13 =======
div is float and > 0
>>> div_matrix([[2343, -1, -83], [-0.23, -49, -3]], 3.40)
[[689.12, -0.29, -24.41], [-0.07, -14.41, -0.88]]

======== CHECK 14 =======
div is int and  < 0
>>> div_matrix([[5.2, 2], [-8, -20]], -3)
[[-1.73, -0.67], [2.67, 6.67]]

======== CHECK 15 =======
div is float and < 0
>>> div_matrix([[100]], -4.25)
[[-23.53]]

======== CHECK 16 =======
precision of matrix nums after div <= 2
>>> res = div_matrix([[4, 5], [-2, 1]], 2)
>>> for row in res:
... 	for i in row:
... 		p = len(str(i).split(".")[1])
... 		print(p <= 2)
...
True
True
True
True

======== CHECK 17 =======
obj returned is a list
>>> res = div_matrix([[9]], 8)
>>> isinstance(res, list)
True

======== CHECK 18 =======
obj returned is different from input_matrix
>>> matrix = [[-1], [2]]
>>> res = div_matrix(matrix, 3.25)
>>> res is not matrix
True

======== CHECK 19 =======
type(div) is None
>>> matrix = [[-1], [2]]
>>> div_matrix(matrix, None)
Traceback (innermost last):
TypeError: div must be a number

======== CHECK 20 =======
Missing div
>>> matrix = [[-1], [2]]
>>> div_matrix(matrix)
Traceback (innermost last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'
